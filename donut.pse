declare cosa, sina, cosb, sinb, theta, theta_spacing, costheta, sintheta, phi, phi_spacing, cosphi, sinphi : real
declare luminance_index, circlex, circley, x, y, z, ooz, l, r1, r2, k2, k1, a, b : real
declare zbuffer : array[0 : 34 * 34] of real
declare char_output : array[0 : 34 * 34] of string
declare empty_row_zbuffer : array[0:34] of real
declare empty_row_char_buffer : array[0:34] of string
declare string_choice, concatenated : string
declare xp, yp, screen_width, screen_height, i, j : integer

for i <- 0 to 34
    empty_row_zbuffer[i] <- 0.0
    empty_row_char_buffer[i] <-  " "
next i


screen_width <- 34
screen_height <- 34
theta_spacing <- 0.07
phi_spacing   <- 0.02
r1 <- 1.0
r2 <- 2.0
k2 <- 5.0
k1 <- (34.0 * k2 * 3.0) / (8.0 * 2.0)
a <- 1.0
b <- 1.0



procedure reset
    cosa <- cos a
    cosb <- cos b
    sina <- sin a
    sinb <- sin b
    declare g, h : integer
    for g <- 0 to 34
        for h <- 0 to 34
            zbuffer[g * 34 + h] <- 0.0
            char_output[g * 34 + h] <- " "
        next h
    next g
    theta <- 0.0
endprocedure

procedure oozgzubber_defs_one
    x <- circlex*(cosb*cosphi + sina*sinb*sinphi) - circley*cosa*sinb
    y <- circlex*(sinb*cosphi - sina*cosb*sinphi) + circley*cosa*cosb
    z <- k2 + cosa*circlex*sinphi + circley*sina
endprocedure

procedure oozgzubber_defs_two
    ooz <- 1/z
    xp <- integer_cast(34/2.0 + k1 * ooz * x)
    yp <- integer_cast(34/2.0 - k1*ooz*y)
    l <- cosphi*costheta*sinb - cosa*costheta*sinphi - sina*sintheta + cosb*(cosa*sintheta - costheta*sina*sinphi)
endprocedure


procedure oozgzubber
    call oozgzubber_defs_one
    call oozgzubber_defs_two
    if l > 0 then
        if ooz > zbuffer[xp * 34 + yp] then
            zbuffer[xp * 34 + yp] <- ooz
            luminance_index <- l * 8
            if luminance_index < 0 then
                luminance_index <- 11 - (luminance_index * (-1))
            endif
            if luminance_index < 1 then
                luminance_index <- luminance_index + 1
            endif
            char_output[xp * 34 + yp] <- mid(string_choice, integer_cast(luminance_index), 1)
        endif
    endif
endprocedure

procedure two_pi
    while theta < 2.0 * 3.14159265 do
        theta <- theta + theta_spacing
        costheta <- cos theta
        sintheta <- sin theta
        phi <- 0.0
        while phi < 2 * 3.14159265 do
            phi <- phi + phi_spacing
            cosphi <- cos phi
            sinphi <- sin phi
            circlex <- r2 + r1 * costheta
            circley <- r1 * sintheta
            call oozgzubber
        endwhile
    endwhile
endprocedure

procedure generate
    call reset
    call two_pi
    for i <- 0 to 34
        concatenated <- ""
        for j <- 0 to 34
            concatenated <- concatenated & char_output[i * 34 + j]
        next j
        output concatenated
    next i
endprocedure



call generate
